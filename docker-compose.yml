version: "3.7"

volumes:
  mongo-db: ~

networks:
  wn-net:

services:
  redis:
    image: redis:7-alpine
    networks:
      - kong-net
      - lora-net
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redisdata:/data

  ccfiw:
    build:
      context: .
    depends_on:
      - redis
    environment:
      # - IOTAGENT__APIKEY=XXXXXXXXXXXXX
      # - IDM__PASSWORD=XXXXXXXX
      # - IDM__USERNAME=XXXXX
      # - IDM__SERVICE=XXXXXX
      # - IDM__SERVICEPATH=/wifi
      # - CCAMPUS__WORKERSSID=Corp
      # - CCAMPUS__PASSWORD=XXXXXXXX
      # - CCAMPUS__USERNAME=XXXXXXXXX
      - REDIS__SERVER=redis:6379
      - REDIS__DATABASE=0
      - GENERAL__LOG_LEVEL=1
  # Orion is the context broker
  # orion:
  #   image: fiware/orion:${ORION_VERSION}
  #   hostname: orion
  #   depends_on:
  #     - mongo
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-file: "5"
  #       max-size: "10m"
  #   links:
  #     - mongo
  #   ports:
  #     - "${ORION_PORT}:${ORION_PORT}" # localhost:1026
  #   command: -dbhost mongo -logLevel INFO
  #   networks:
  #     - wn-net
  #   healthcheck:
  #     test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
  #     interval: 5s

  # mongo:
  #   image: mongo:${MONGO_DB_VERSION}
  #   command: --bind_ip_all
  #   volumes:
  #     - mongo-db:/data
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-file: "5"
  #       max-size: "10m"
  #   ports:
  #     - "127.0.0.1:27017:27017"
  #   networks:
  #     - wn-net
  #   healthcheck:
  #     test: |
  #       host=`hostname --ip-address || echo '127.0.0.1'`; 
  #       mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1

  # # IoT-Agent is configured for the JSON Protocol
  # iot-agent:
  #   image: fiware/iotagent-json:${JSON_VERSION}
  #   hostname: iot-agent
  #   container_name: fiware-iot-agent
  #   depends_on:
  #     - mongo
  #   networks:
  #     - wn-net
  #   expose:
  #     - "${IOTA_NORTH_PORT}"
  #     - "${IOTA_SOUTH_PORT}"
  #   ports:
  #     - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
  #     - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
  #   environment:
  #     - IOTA_CB_HOST=orion # name of the context broker to update context
  #     - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
  #     - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
  #     - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
  #     - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
  #     - IOTA_DEFAULT_EXPRESSION_LANGUAGE=jexl
  #     - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
  #     - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
  #     - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
  #     - IOTA_MONGO_HOST=mongo # The host name of MongoDB
  #     - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
  #     - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
  #     - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
  #     - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
  #     - IOTA_DEFAULT_RESOURCE=/iot/json
  #   healthcheck:
  #     interval: 5s